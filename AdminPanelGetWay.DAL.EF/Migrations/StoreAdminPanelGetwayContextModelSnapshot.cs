// <auto-generated />
using AdminPanelGetWay.DAL.EF.ProjectContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace AdminPanelGetWay.DAL.EF.Migrations
{
    [DbContext(typeof(StoreAdminPanelGetwayContext))]
    partial class StoreAdminPanelGetwayContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("AdminPanelGetWay.Domain.Aggregates.RoleAggregate.AccessLevel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AccessLevels");
                });

            modelBuilder.Entity("AdminPanelGetWay.Domain.Aggregates.RoleAggregate.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("AdminPanelGetWay.Domain.Aggregates.RoleAggregate.AccessLevel", b =>
                {
                    b.HasOne("AdminPanelGetWay.Domain.Aggregates.RoleAggregate.Role", "Role")
                        .WithMany("AccessLevels")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("AdminPanelGetWay.Domain.Aggregates.RoleAggregate.ValueObjects.Access", "Access", b1 =>
                        {
                            b1.Property<long>("AccessLevelId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("RoleAccess")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("AccessLevelId");

                            b1.ToTable("AccessLevels");

                            b1.WithOwner()
                                .HasForeignKey("AccessLevelId");
                        });
                });

            modelBuilder.Entity("AdminPanelGetWay.Domain.Aggregates.RoleAggregate.Role", b =>
                {
                    b.OwnsOne("AdminPanelGetWay.Domain.Aggregates.ValueObjects.RoleName", "RoleName", b1 =>
                        {
                            b1.Property<long>("RoleId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("bigint")
                                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                            b1.Property<string>("RoleNameEn")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("RoleNameFa")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("RoleId");

                            b1.ToTable("Roles");

                            b1.WithOwner()
                                .HasForeignKey("RoleId");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
